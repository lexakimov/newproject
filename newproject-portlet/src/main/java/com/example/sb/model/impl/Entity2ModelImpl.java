package com.example.sb.model.impl;

import com.example.sb.model.Entity2;
import com.example.sb.model.Entity2Model;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Entity2 service. Represents a row in the &quot;SB_Entity2&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.example.sb.model.Entity2Model} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Entity2Impl}.
 * </p>
 *
 * @author akimov
 * @see Entity2Impl
 * @see com.example.sb.model.Entity2
 * @see com.example.sb.model.Entity2Model
 * @generated
 */
public class Entity2ModelImpl extends BaseModelImpl<Entity2>
    implements Entity2Model {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity2 model instance should use the {@link com.example.sb.model.Entity2} interface instead.
     */
    public static final String TABLE_NAME = "SB_Entity2";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "Field2", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table SB_Entity2 (id_ LONG not null primary key,Field2 VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table SB_Entity2";
    public static final String ORDER_BY_JPQL = " ORDER BY entity2.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SB_Entity2.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.example.sb.model.Entity2"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.example.sb.model.Entity2"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.example.sb.model.Entity2"));
    private static ClassLoader _classLoader = Entity2.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Entity2.class
        };
    private long _id;
    private String _Field2;
    private Entity2 _escapedModel;

    public Entity2ModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Entity2.class;
    }

    @Override
    public String getModelClassName() {
        return Entity2.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("Field2", getField2());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String Field2 = (String) attributes.get("Field2");

        if (Field2 != null) {
            setField2(Field2);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getField2() {
        if (_Field2 == null) {
            return StringPool.BLANK;
        } else {
            return _Field2;
        }
    }

    @Override
    public void setField2(String Field2) {
        _Field2 = Field2;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Entity2.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Entity2 toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Entity2) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        Entity2Impl entity2Impl = new Entity2Impl();

        entity2Impl.setId(getId());
        entity2Impl.setField2(getField2());

        entity2Impl.resetOriginalValues();

        return entity2Impl;
    }

    @Override
    public int compareTo(Entity2 entity2) {
        long primaryKey = entity2.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Entity2)) {
            return false;
        }

        Entity2 entity2 = (Entity2) obj;

        long primaryKey = entity2.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Entity2> toCacheModel() {
        Entity2CacheModel entity2CacheModel = new Entity2CacheModel();

        entity2CacheModel.id = getId();

        entity2CacheModel.Field2 = getField2();

        String Field2 = entity2CacheModel.Field2;

        if ((Field2 != null) && (Field2.length() == 0)) {
            entity2CacheModel.Field2 = null;
        }

        return entity2CacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", Field2=");
        sb.append(getField2());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.example.sb.model.Entity2");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Field2</column-name><column-value><![CDATA[");
        sb.append(getField2());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
