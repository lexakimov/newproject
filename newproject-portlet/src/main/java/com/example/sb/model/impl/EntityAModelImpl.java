package com.example.sb.model.impl;

import com.example.sb.model.EntityA;
import com.example.sb.model.EntityAModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EntityA service. Represents a row in the &quot;SB_EntityA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.example.sb.model.EntityAModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityAImpl}.
 * </p>
 *
 * @author akimov
 * @see EntityAImpl
 * @see com.example.sb.model.EntityA
 * @see com.example.sb.model.EntityAModel
 * @generated
 */
public class EntityAModelImpl extends BaseModelImpl<EntityA>
    implements EntityAModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity a model instance should use the {@link com.example.sb.model.EntityA} interface instead.
     */
    public static final String TABLE_NAME = "SB_EntityA";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table SB_EntityA (id_ LONG not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table SB_EntityA";
    public static final String ORDER_BY_JPQL = " ORDER BY entityA.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SB_EntityA.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.example.sb.model.EntityA"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.example.sb.model.EntityA"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.example.sb.model.EntityA"));
    private static ClassLoader _classLoader = EntityA.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityA.class
        };
    private long _id;
    private EntityA _escapedModel;

    public EntityAModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityA.class;
    }

    @Override
    public String getModelClassName() {
        return EntityA.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            EntityA.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public EntityA toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityA) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityAImpl entityAImpl = new EntityAImpl();

        entityAImpl.setId(getId());

        entityAImpl.resetOriginalValues();

        return entityAImpl;
    }

    @Override
    public int compareTo(EntityA entityA) {
        long primaryKey = entityA.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityA)) {
            return false;
        }

        EntityA entityA = (EntityA) obj;

        long primaryKey = entityA.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityA> toCacheModel() {
        EntityACacheModel entityACacheModel = new EntityACacheModel();

        entityACacheModel.id = getId();

        return entityACacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(3);

        sb.append("{id=");
        sb.append(getId());

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(7);

        sb.append("<model><model-name>");
        sb.append("com.example.sb.model.EntityA");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
